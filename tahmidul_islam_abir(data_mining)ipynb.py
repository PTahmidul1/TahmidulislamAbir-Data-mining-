# -*- coding: utf-8 -*-
"""Tahmidul Islam Abir(Data Mining)ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XRbmXxZqx3uR4egWk7t_aeNN__GWNiF7
"""

!pip install -q kaggle

from google.colab import files

# Upload your Kaggle API key (kaggle.json) file
files.upload()

!mkdir ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets list

!kaggle datasets download -d heeraldedhia/groceries-dataset

!mkdir groceries

!unzip groceries-dataset.zip -d groceries

cd/content/groceries/

#Dataset_1 named by "Association Learning using Apriori and Fpgrowth"

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All"
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

df = pd.read_csv("Groceries_dataset.csv")

df.head()

transactions = [a[1]['itemDescription'].tolist() for a in list(df.groupby(['Member_number','Date']))]
transactions

from mlxtend.preprocessing import TransactionEncoder

te = TransactionEncoder()
te_ary = te.fit(transactions).transform(transactions)
df = pd.DataFrame(te_ary, columns=te.columns_)
df

from mlxtend.frequent_patterns import apriori

apriori(df, min_support=0.001)

apriori(df, min_support=0.001, use_colnames=True)

frequent_itemsets = apriori(df, min_support=0.001, use_colnames=True)
frequent_itemsets['length'] = frequent_itemsets['itemsets'].apply(lambda x: len(x))
frequent_itemsets

frequent_itemsets['length'] = frequent_itemsets['itemsets'].apply(lambda x: len(x))
frequent_itemsets.head(10)

frequent_itemsets[ frequent_itemsets['itemsets'] == {'whole milk', 'rolls/buns'} ]

from mlxtend.frequent_patterns import fpgrowth

fpgrowth(df, min_support=0.001)

fpgrowth(df, min_support=0.01, use_colnames=True)

import pandas as pd
te = TransactionEncoder()
te_ary = te.fit(df).transform(df)
df = pd.DataFrame(te_ary, columns=te.columns_)

# Commented out IPython magic to ensure Python compatibility.
# %timeit -n 100 -r 10 apriori(df, min_support=0.01)

# Commented out IPython magic to ensure Python compatibility.
# %timeit -n 100 -r 10 fpgrowth(df, min_support=0.01)

#Solution Code of dataset_1

# Import necessary libraries
import pandas as pd
from mlxtend.preprocessing import TransactionEncoder
from mlxtend.frequent_patterns import apriori, fpgrowth

# Load the dataset
df = pd.read_csv("Groceries_dataset.csv")

# Extract transactions
transactions = [a[1]['itemDescription'].tolist() for a in list(df.groupby(['Member_number', 'Date']))]

# Perform one-hot encoding
te = TransactionEncoder()
te_ary = te.fit(transactions).transform(transactions)
df_encoded = pd.DataFrame(te_ary, columns=te.columns_)

# Apriori
frequent_itemsets_apriori = apriori(df_encoded, min_support=0.001, use_colnames=True)
frequent_itemsets_apriori['length'] = frequent_itemsets_apriori['itemsets'].apply(lambda x: len(x))

# Display frequent itemsets with Apriori
print("Frequent Itemsets with Apriori:")
print(frequent_itemsets_apriori.head(10))

# FP-growth
frequent_itemsets_fpgrowth = fpgrowth(df_encoded, min_support=0.001, use_colnames=True)

# Display frequent itemsets with FP-growth
print("\nFrequent Itemsets with FP-growth:")
print(frequent_itemsets_fpgrowth.head(10))

#Dataset_2 named by "Compare Apriori vs Fp_growth PTIT"

import time
import pandas as pd
import matplotlib.pyplot as plt
from mlxtend.preprocessing import TransactionEncoder
from mlxtend.frequent_patterns import apriori, association_rules, fpgrowth

groceries = pd.read_csv("Groceries_dataset.csv")

groceries.shape

groceries.head()

# Get all the transactions as a list of lists
all_transactions = [transaction[1]['itemDescription'].tolist() for transaction in list(groceries.groupby(['Member_number', 'Date']))]

# First 21st transactions in the transactional dataset
len(all_transactions)

# Look at the 10 first transactions
all_transactions[0:10]

# The following instructions transform the dataset into the required format
trans_encoder = TransactionEncoder() # Instanciate the encoder
trans_encoder_matrix = trans_encoder.fit(all_transactions).transform(all_transactions)
trans_encoder_matrix = pd.DataFrame(trans_encoder_matrix, columns=trans_encoder.columns_)

trans_encoder_matrix.head()

frequent_itemsets = fpgrowth(trans_encoder_matrix, min_support=0.001, use_colnames=True)

frequent_itemsets

rules = association_rules(frequent_itemsets, metric='confidence', min_threshold=0.02)

rules

def perform_rule_calculation(transact_items_matrix, rule_type="fpgrowth", min_support=0.001):

    start_time = 0
    total_execution = 0

    if(not rule_type=="fpgrowth"):
        start_time = time.time()
        rule_items = apriori(transact_items_matrix,
                       min_support=min_support,
                       use_colnames=True, low_memory=True)
        total_execution = time.time() - start_time
        print("Computed Apriori!")

    else:
        start_time = time.time()
        rule_items = fpgrowth(transact_items_matrix,
                       min_support=min_support,
                       use_colnames=True)
        total_execution = time.time() - start_time
        print("Computed Fp Growth!")

    return total_execution

n_range = range(1, 10, 1)
list_time_ap = []
list_time_fp = []
for n in n_range:
    time_ap = 0
    time_fp = 0
    min_sup = float(n/100)
    time_ap = perform_rule_calculation(trans_encoder_matrix, rule_type="fpgrowth", min_support=min_sup)
    time_fp = perform_rule_calculation(trans_encoder_matrix, rule_type="aprior", min_support=min_sup)
    list_time_ap.append(time_ap)
    list_time_fp.append(time_fp)

list_time_ap

import matplotlib.pyplot as plt

plt.plot(n_range, list_time_ap, label='Apriori', color='green')
plt.plot(n_range, list_time_fp, label='Fp_growth', color='red')
plt.xlabel("Support (%)")
plt.ylabel("Run Time (seconds)")
plt.legend(loc="best")
plt.show()

#Solution Code of dataset_2

import time
import pandas as pd
import matplotlib.pyplot as plt
from mlxtend.preprocessing import TransactionEncoder
from mlxtend.frequent_patterns import apriori, association_rules, fpgrowth

# Load the dataset
groceries = pd.read_csv("Groceries_dataset.csv")

# Get all the transactions as a list of lists
all_transactions = [transaction[1]['itemDescription'].tolist() for transaction in list(groceries.groupby(['Member_number', 'Date']))]

# The following instructions transform the dataset into the required format
trans_encoder = TransactionEncoder()  # Instantiate the encoder
trans_encoder_matrix = trans_encoder.fit(all_transactions).transform(all_transactions)
trans_encoder_matrix = pd.DataFrame(trans_encoder_matrix, columns=trans_encoder.columns_)

def perform_rule_calculation(transact_items_matrix, rule_type="fpgrowth", min_support=0.001):
    start_time = 0
    total_execution = 0

    if not rule_type == "fpgrowth":
        start_time = time.time()
        rule_items = apriori(transact_items_matrix,
                             min_support=min_support,
                             use_colnames=True, low_memory=True)
        total_execution = time.time() - start_time
        print("Computed Apriori!")

    else:
        start_time = time.time()
        rule_items = fpgrowth(transact_items_matrix,
                              min_support=min_support,
                              use_colnames=True)
        total_execution = time.time() - start_time
        print("Computed Fp Growth!")

    return total_execution

n_range = range(1, 10, 1)
list_time_ap = []
list_time_fp = []

for n in n_range:
    time_ap = 0
    time_fp = 0
    min_sup = float(n / 100)
    time_ap = perform_rule_calculation(trans_encoder_matrix, rule_type="fpgrowth", min_support=min_sup)
    time_fp = perform_rule_calculation(trans_encoder_matrix, rule_type="aprior", min_support=min_sup)
    list_time_ap.append(time_ap)
    list_time_fp.append(time_fp)

import matplotlib.pyplot as plt

plt.plot(n_range, list_time_ap, label='Apriori', color='green')
plt.plot(n_range, list_time_fp, label='Fp_growth', color='red')
plt.xlabel("Support (%)")
plt.ylabel("Run Time (seconds)")
plt.legend(loc="best")
plt.show()